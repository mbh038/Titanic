library(leaps)
set.seed(11)
folds=sample(rep(1:10,length=nrow(train)))
folds
table(folds)
cv.errors=matrix(NA,10,2)
for(k in 1:10){
best.fit=glm(Survived~Pclass+Sex,data=train[folds!=k,],method="class")
for(i in 1:2){
pred=predict(best.fit,train[folds==k,],id=i)
cv.errors[k,i]=mean( (train$Survived[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
?glm
library(leaps)
set.seed(11)
folds=sample(rep(1:10,length=nrow(train)))
folds
table(folds)
cv.errors=matrix(NA,10,2)
for(k in 1:10){
best.fit=glm(Survived~Pclass+Sex,data=train[folds!=k,],family=binomial)
for(i in 1:2){
pred=predict(best.fit,train[folds==k,],id=i)
cv.errors[k,i]=mean( (train$Survived[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
library(leaps)
set.seed(11)
folds=sample(rep(1:10,length=nrow(train)))
folds
table(folds)
cv.errors=matrix(NA,10,3)
for(k in 1:10){
best.fit=glm(Survived~Pclass+Sex+Fare,data=train[folds!=k,],family=binomial)
for(i in 1:3){
pred=predict(best.fit,train[folds==k,],id=i)
cv.errors[k,i]=mean( (train$Survived[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,],id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
predict.regsubsets=function(object,newdata,id,...){
form=as.formula(object$call[[2]])
mat=model.matrix(form,newdata)
coefi=coef(object,id=id)
mat[,names(coefi)]%*%coefi
}
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,],id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,],id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(val.errors),ylab="Root MSE",ylim=c(300,400),pch=19,type="b")
points(sqrt(regfit.fwd$rss[-1]/180),col="blue",pch=19,type="b")
legend("topright",legend=c("Training","Validation"),col=c("blue","black"),pch=19)
dim(Hitters)
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
train
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(val.errors),ylab="Root MSE",ylim=c(300,400),pch=19,type="b")
points(sqrt(regfit.fwd$rss[-1]/180),col="blue",pch=19,type="b")
legend("topright",legend=c("Training","Validation"),col=c("blue","black"),pch=19)
data<-read.csv("./data/train.csv")
#test<-read.csv("./data/test.csv")
str(data)
summary(data())
library(caTools)
set.seed(1000)
spl = sample.split(data$Survived, SplitRatio = 0.5)
train = subset(sf, spl==TRUE)
test = subset(sf, spl==FALSE)
library(caTools)
set.seed(1000)
spl = sample.split(data$Survived, SplitRatio = 0.5)
train = subset(data, spl==TRUE)
test = subset(data, spl==FALSE)
fol=formula(Survived~Pclass+Sex+Fare)
fit=glm(Survived~Pclass+Sex+Fare,data=train[folds!=k,],family=binomial)
LRmodel <- glm(fol, data=train,family=binomial)
PredictLRmodel = predict(LRmodel, newdata = test, type = "class")
ct<-table(test$Survived, PredictCARTmodel)
ct
sum(diag(ct))/sum(ct)
PredictLRmodel = predict(LRmodel, newdata = test, type = "class")
PredictLRmodel = predict(LRmodel, newdata = test, type = "response")
ct<-table(test$Survived, PredictLRmodel)
ct
sum(diag(ct))/sum(ct)
sum(PredictLRmodel==test$Survived)/nrow(test)
summary(PredictLRmodel)
LRmodel <- glm.fit(fol, data=train,family=binomial)
fol=formula(Survived~Pclass+Sex+Fare)
fit=glm(Survived~Pclass+Sex+Fare,data=train[folds!=k,],family=binomial)
LRmodel <- glm.fit(fol, data=train,family=binomial)
glm.probs<- predict(LRmodel, newdata = test, type = "response")
glm.pred=rep(0,len(test))
glm.pred[glm.probs>.5]=1
ct<-table(test$Survived, glm.pred)
ct
sum(diag(ct))/sum(ct)
sum(glm.pred==test$Survived)/nrow(test)
fol=formula(Survived~Pclass+Sex+Fare)
fit=glm(Survived~Pclass+Sex+Fare,data=train[folds!=k,],family=binomial)
LRmodel <- glm.fit(fol, data=train,family=binomial)
glm.probs<- predict(LRmodel, newdata = test, type = "response")
fol=formula(Survived~Pclass+Sex+Fare)
fit=glm(Survived~Pclass+Sex+Fare,data=train[folds!=k,],family=binomial)
LRmodel <- glm(fol, data=train,family=binomial)
glm.probs<- predict(LRmodel, newdata = test, type = "response")
glm.pred=rep(0,len(test))
glm.pred=rep(0,length(test))
glm.pred[glm.probs>.5]=1
ct<-table(test$Survived, glm.pred)
ct
sum(diag(ct))/sum(ct)
sum(glm.pred==test$Survived)/nrow(test)
summary(glm.pred)
head(glm.pred)
summary(glm.probs)
length(glm.probs)
length(glm.pred)
table(glm.pred)
hist(glm.probs)
glm.pred[glm.probs>.5]=1
table(glm.pred)
glm.probs>.5
str(glm.probs)
str(glm.pred)
glm.pred
glm.probs[28]
glm.probs[28]>0.5
a<-c(.2,.7)
b<-c(0,0)
b[a>0.5]=1
b
glm.probs<- predict(LRmodel, newdata = test, type = "response")
glm.pred=rep(0,length(test))
glm.pred[glm.probs>.5]=1
table(glm.pred)
glm.probs[26:30]
library(rpart)
library(rpart)
library(rpart.plot)
# construct formula object
fol=formula(Survived~Pclass+Sex+Fare)
CARTmodel <- rpart(fol, method="class", data=train)
print(CARTmodel)
prp(CARTb)
## Step 5: Evaluate the decision tree on the test data.
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
ct<-table(test$Survived, PredictCARTmodel)
ct
sum(diag(ct))/sum(ct)
sum(PredictCARTmodel==test$Survived)/nrow(test)
prp(CARTb)
prp(CARTmodel)
table(PredictCARTmodel)
str(data)
# Decision tree using CART
library(rpart)
library(rpart)
library(rpart.plot)
fol=formula(Survived~Pclass+Sex+Fare+SibSp+Parch)
CARTmodel <- rpart(fol, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
print(CARTmodel)
prp(CARTmodel)
print(CARTmodel)
prp(CARTmodel)
fol=formula(Survived~Pclass+Sex+Fare+SibSp+Parch)
CARTmodel <- rpart(fol, method="class", data=train)
print(CARTmodel)
fol=formula(Survived~Pclass+Sex+Fare)
# Decision tree using CART
library(rpart)
library(rpart)
library(rpart.plot)
fol=formula(Survived~Pclass+Sex+Fare)
CARTmodel <- rpart(fol, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
# Decision tree using CART
library(rpart)
library(rpart)
library(rpart.plot)
fol=formula(Survived~Pclass+Sex)
CARTmodel <- rpart(fol, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
# Decision tree using CART
library(rpart)
library(rpart)
library(rpart.plot)
fol=formula(Survived~Pclass+Sex+Fare)
CARTmodel <- rpart(fol, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
fol=formula(Survived~Pclass+Sex+Fare)
fit=glm(Survived~Pclass+Sex+Fare,data=train[folds!=k,],family=binomial)
LRmodel <- glm(fol, data=train,family=binomial)
glm.probs<- predict(LRmodel, newdata = test, type = "response")
glm.pred=rep(0,length(test))
glm.pred[glm.probs>.5]=1
ct<-table(test$Survived, glm.pred)
ct
sum(diag(ct))/sum(ct)
sum(glm.pred==test$Survived)/nrow(test)
glm.pred[glm.probs>.5]<-1
sum(glm.pred==test$Survived)/nrow(test)
glm.pred[glm.probs>.5]->1
glm.pred[glm.probs>0.5]=1
sum(glm.pred==test$Survived)/nrow(test)
fol=formula(Survived~Pclass+Sex+Fare)
fol=formula(Survived~Pclass+Sex+Fare)
LRmodel <- glm.fit(fol, data=train,family=binomial)
glm.fit=glm(fol,data=train,family=binomial)
glm.probs<- predict(glm.fit, newdata = test, type = "response")
glm.pred=rep(0,length(test))
glm.pred[glm.probs>0.5]=1
sum(glm.pred==test$Survived)/nrow(test)
ct<-table(test$Survived, glm.pred)
ct
sum(diag(ct))/sum(ct)
glm.pred=rep(0,length(test))
summary(glm.pred)
str(glm.pred)
length(glm.pred)
length(glm.probs)
glm.pred=rep(0,length(test))
length(glm.pred)
length(test)
library(caTools)
set.seed(1000)
spl = sample.split(data$Survived, SplitRatio = 0.5)
train = subset(data, spl==TRUE)
test = subset(data, spl==FALSE)
fol=formula(Survived~Pclass+Sex+Fare)
glm.fit=glm(fol,data=train,family=binomial)
glm.probs<- predict(glm.fit, newdata = test, type = "response")
glm.pred=rep(0,length(test))
glm.pred[glm.probs>0.5]=1
ct<-table(test$Survived, glm.pred)
ct
sum(diag(ct))/sum(ct)
sum(glm.pred==test$Survived)/nrow(test)
test = subset(data, spl==FALSE)
fol=formula(Survived~Pclass+Sex+Fare)
glm.fit=glm(fol,data=train,family=binomial)
glm.probs<- predict(glm.fit, newdata = test, type = "response")
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>0.5]=1
ct<-table(test$Survived, glm.pred)
ct
sum(diag(ct))/sum(ct)
sum(glm.pred==test$Survived)/nrow(test)
fol=formula(Survived~Pclass+Sex+Fare)
glm.fit=glm(fol,data=train,family=binomial)
glm.probs<- predict(glm.fit, newdata = test, type = "response")
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>0.6]=1
sum(glm.pred==test$Survived)/nrow(test)
fol=formula(Survived~Pclass+Sex+Fare)
glm.fit=glm(fol,data=train,family=binomial)
glm.probs<- predict(glm.fit, newdata = test, type = "response")
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>0.7]=1
sum(glm.pred==test$Survived)/nrow(test)
fol=formula(Survived~Pclass+Sex+Fare)
glm.fit=glm(fol,data=train,family=binomial)
glm.probs<- predict(glm.fit, newdata = test, type = "response")
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>0.9]=1
sum(glm.pred==test$Survived)/nrow(test)
seq(0,1,0.1)
for (i in seq(0,1,0.1)){
glm.pred[glm.probs>i]=1
print (sum(glm.pred==test$Survived)/nrow(test))
}
for (threshold in seq(0,1,0.1)){
glm.pred[glm.probs>threshold]=1
print (sum(glm.pred==test$Survived)/nrow(test))
}
for (threshold in seq(0,1,0.1)){
glm.pred[glm.probs>threshold]=1
sum(glm.pred==test$Survived)/nrow(test)
}
sum(glm.pred==test$Survived)/nrow(test)
length(seq(0,1,0.1))
thresholds<-seq(0,1,0.1)
glm.acc=rep(0,11)
for (threshold in thresholds){
glm.pred[glm.probs>threshold]=1
glm.acc<-sum(glm.pred==test$Survived)/nrow(test)
}
plot(thresholds,glm.acc)
thresholds<-seq(0,1,0.1)
glm.acc=rep(0,11)
for (i in thresholds){
glm.pred[glm.probs>i]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
}
plot(thresholds,glm.acc)
thresholds<-seq(0,1,0.1)
glm.acc=rep(0,11)
for (i in 1:11){
glm.pred[glm.probs>thresholds[i]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
}
plot(thresholds,glm.acc)
thresholds<-seq(0,1,0.1)
glm.acc=rep(0,11)
for (i in 1:11){
glm.pred[glm.probs>thresholds[i]]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
}
plot(thresholds,glm.acc)
glm.acc
thresholds
thresholds<-seq(0,1,0.1)
glm.acc=rep(0,11)
for (i in 1:11){
print (thresholds[i])
glm.pred[glm.probs>thresholds[i]]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
}
plot(thresholds,glm.acc)
thresholds<-seq(0,1,0.1)
glm.acc=rep(0,11)
for (i in 1:11){
print (thresholds[i])
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>thresholds[i]]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
}
plot(thresholds,glm.acc)
?seq
thresholds<-seq(.4, .8, length.out=11 )
glm.acc=rep(0,length(thresholds))
for (i in 1:11){
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>thresholds[i]]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
}
plot(thresholds,glm.acc)
thresholds<-seq(.5, .9, length.out=50 )
glm.acc=rep(0,length(thresholds))
for (i in length(thresholds)){
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>thresholds[i]]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
}
plot(thresholds,glm.acc)
thresholds<-seq(.5, .9, length.out=50 )
glm.acc=rep(0,length(thresholds))
for (i in 1:length(thresholds)){
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>thresholds[i]]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
}
plot(thresholds,glm.acc)
maxThreshold<-0
glm.accMax<-0
thresholds<-seq(.5, .9, length.out=50 )
glm.acc=rep(0,length(thresholds))
for (i in 1:length(thresholds)){
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>thresholds[i]]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
if (glm.acc[i] > glm.accMax) {
glm.accMax = glm.acc[i]
maxThreshold=thresholds[i]
}
}
plot(thresholds,glm.acc)
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>maxThreshold]=1
sum(glm.pred==test$Survived)/nrow(test)
# Decision tree using CART
library(rpart)
library(rpart)
library(rpart.plot)
fol=formula(Survived~Pclass+Sex+Fare)
CARTmodel <- rpart(fol, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
?write.csv
## Titanic Kaggle
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(data)
summary(data())
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.5)
train = subset(ddataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
# logistic Regression model
fol=formula(Survived~Pclass+Sex+Fare)
glm.fit=glm(fol,data=train,family=binomial)
glm.probs<- predict(glm.fit, newdata = test, type = "response")
maxThreshold<-0
glm.accMax<-0
thresholds<-seq(.5, .9, length.out=50 )
glm.acc=rep(0,length(thresholds))
for (i in 1:length(thresholds)){
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>thresholds[i]]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
if (glm.acc[i] > glm.accMax) {
glm.accMax = glm.acc[i]
maxThreshold=thresholds[i]
}
}
plot(thresholds,glm.acc)
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>maxThreshold]=1
sum(glm.pred==test$Survived)/nrow(test)
glm.probs<- predict(glm.fit, newdata = dataTest, type = "response")
glm.pred=rep(0,length(dataTest$Survived))
glm.pred[glm.probs>maxThreshold]=1
submission<-data.frame("PassengerId","Survived")
submission$PassengerId<-dataTest$PassengerId
submission$Survived<-glm.pred
write.csv(submission,"./data/glm.csv")
submission<-data.frame(dataTest$PassengerId,glm.pred)
names(submission)<-c("PassengerId","Survived")
write.csv(submission,"./data/glm.csv")
submission<-data.frame(dataTest$PassengerId,glm.pred)
names(submission)<-c("PassengerId","Survived")
write.csv(submission,"./submissions/glm1.csv")
glm.probs<- predict(glm.fit, newdata = dataTest, type = "response")
glm.pred=rep(0,nrow(dataTest))
glm.pred[glm.probs>maxThreshold]=1
submission<-data.frame(dataTest$PassengerId,glm.pred)
names(submission)<-c("PassengerId","Survived")
write.csv(submission,"./submissions/glm1.csv")
?write.table
write.table(submission,"./submissions/glm1.csv",sep=",",row.names=FALSE)
