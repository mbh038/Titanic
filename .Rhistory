bestCp<-vector()
for (i in 1:8){
#     train$Survived<-as.factor(train$Survived)
#     test$Survived<-as.factor(test$Survived)
# fit CART model with optimal cp = 0.006
library(rpart)
library(rpart.plot)
set.seed(2)
tr = train(model(i)[[1]], data = dataTrain, method = "rpart", trControl = tr.control, tuneGrid = cartGrid)
tr
# Extract tree
best.tree = tr$finalModel
prp(best.tree)
bestCp[i]=tr$results$cp[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",i,"Cp: ",bestCp[i],"accuracy: ",max(tr$results$Accuracy),sep=" "))
CARTcp = rpart(model(i)[[1]], data=dataTrain, method="class",cp=bestCp[i])
prp(CARTcp)
# 2.4 accuracy
#     PredictCARTcp = predict(CARTcp, newdata = test, type = "class")
#     acc<-sum(PredictCARTcp==test$Survived)/nrow(test)
#     print (acc)
#     if (acc > accbest){
#         accbest=acc
#         ibest =i
#     }
}
library(lattice)
library(ggplot2)
library(rpart)
library(rpart)
library(rpart.plot)
library(caret)
library(e1071)
# Number of folds
set.seed(2)
tr.control = trainControl(method = "cv", number = 10)
#Test cp values from 0.002 to 0.1 in 0.002 increments
cartGrid = expand.grid( .cp = seq(0.001,0.01,0.0001))
# Cross-validation
#start()
accbest<-0
ibest<-0
bestCp<-vector()
for (i in 1:8){
#     train$Survived<-as.factor(train$Survived)
#     test$Survived<-as.factor(test$Survived)
# fit CART model with optimal cp = 0.006
library(rpart)
library(rpart.plot)
set.seed(2)
tr = train(model(i)[[1]], data = dataTrain, method = "rpart", trControl = tr.control, tuneGrid = cartGrid)
tr
# Extract tree
best.tree = tr$finalModel
prp(best.tree)
bestCp[i]=tr$results$cp[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",i,"Cp: ",bestCp[i],"accuracy: ",max(tr$results$Accuracy),sep=" "))
CARTcp = rpart(model(i)[[1]], data=dataTrain, method="class",cp=bestCp[i])
prp(CARTcp)
# 2.4 accuracy
#     PredictCARTcp = predict(CARTcp, newdata = test, type = "class")
#     acc<-sum(PredictCARTcp==test$Survived)/nrow(test)
#     print (acc)
#     if (acc > accbest){
#         accbest=acc
#         ibest =i
#     }
}
bestCp
bestCp[8]
set.seed(2)
CARTcp = rpart(model(8)[[1]], data=dataTrain, method="class",cp=0.0082)
prp(CARTcp)
set.seed(2)
#submit
PredictCARTcp<-predict(CARTcp, newdata = dataTest, type = "class")
submission<-data.frame(dataTest$PassengerId,as.numeric(PredictCARTcp)-1)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/cart8_cv.csv",sep=",",row.names=FALSE)
model<-function(x){
md=list(8)
md[[1]]<-c(as.formula("as.factor(Survived)~Sex+Pclass"),2)
md[[2]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare"),3)
md[[3]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age"),4)
md[[4]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age+SibSp+Parch"),6) # Age na rows removed
md[[5]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age+Title +FamilyID2+FamilySize +Cabin"),8)
md[[6]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID"),10)
md[[7]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID+Cabin"),11)
md[[8]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age +Fare + Embarked + Title + FamilySize + FamilyID+Cabin"),9)
md[[x]]
}
library(lattice)
library(ggplot2)
library(rpart)
library(rpart)
library(rpart.plot)
library(caret)
library(e1071)
# Number of folds
set.seed(2)
tr.control = trainControl(method = "cv", number = 10)
#Test cp values from 0.002 to 0.1 in 0.002 increments
cartGrid = expand.grid( .cp = seq(0.001,0.01,0.0001))
# Cross-validation
#start()
accbest<-0
ibest<-0
bestCp<-vector()
for (i in 1:8){
#     train$Survived<-as.factor(train$Survived)
#     test$Survived<-as.factor(test$Survived)
# fit CART model with optimal cp = 0.006
library(rpart)
library(rpart.plot)
set.seed(2)
tr = train(model(i)[[1]], data = dataTrain, method = "rpart", trControl = tr.control, tuneGrid = cartGrid)
tr
# Extract tree
best.tree = tr$finalModel
prp(best.tree)
bestCp[i]=tr$results$cp[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",i,"Cp: ",bestCp[i],"accuracy: ",max(tr$results$Accuracy),sep=" "))
set.seed(2)
CARTcp = rpart(model(i)[[1]], data=dataTrain, method="class",cp=bestCp[i])
prp(CARTcp)
# 2.4 accuracy
#     PredictCARTcp = predict(CARTcp, newdata = test, type = "class")
#     acc<-sum(PredictCARTcp==test$Survived)/nrow(test)
#     print (acc)
#     if (acc > accbest){
#         accbest=acc
#         ibest =i
#     }
}
accbest=0
ibest=0
bestmtry<-vector()
for (i in 6:8){
treeGrid = expand.grid( .mtry= seq(1,model(i)[[2]],1))
#Tstart()
#train$Survived<-as.factor(train$Survived)
#test$Survived<-as.factor(test$Survived)
tr = train(model(i)[[1]], data = dataTrain, method = "rf", trControl = tr.control, tuneGrid = treeGrid)
tr
# Extract ntree
best.forest = tr$finalModel
#prp(best.tree)
bestmtry[i]=tr$results$mtry[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
forestmodel<-randomForest(model(i)[[1]], data=train,importance=TRUE,mtry=bestmtry[i],ntree=2000)
varImpPlot(forestmodel)
#     rf.probs = predict(forestmodel, newdata = test)
#     acc=sum(rf.probs==test$Survived)/nrow(test)
print (paste("Model: ",i, "ntree= ",2000,"mtry= ",bestmtry[i],"Accuracy= ",acc,sep=" "))
#     if (acc > accbest){
#         accbest=acc
#         ibest =i
#     }
}
model<-function(x){
md=list(8)
md[[1]]<-c(as.formula("as.factor(Survived)~Sex+Pclass"),2)
md[[2]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare"),3)
md[[3]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age"),4)
md[[4]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age+SibSp+Parch"),6) # Age na rows removed
md[[5]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age+Title +FamilyID2+FamilySize +Cabin"),8)
md[[6]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2"),10)
md[[7]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2+Cabin"),11)
md[[8]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age +Fare + Embarked + Title + FamilySize + FamilyID2+Cabin"),9)
md[[x]]
}
set.seed(1)
tr.control = trainControl(method = "cv", number = 10)
bestmtry<-vector()
for (i in 6:8){
treeGrid = expand.grid( .mtry= seq(1,model(i)[[2]],1))
tr = train(model(i)[[1]], data = dataTrain, method = "rf", trControl = tr.control, tuneGrid = treeGrid)
tr
# Extract ntree
best.forest = tr$finalModel
prp(best.tree)
bestmtry[i]=tr$results$mtry[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
forestmodel<-randomForest(model(i)[[1]], data=train,importance=TRUE,mtry=bestmtry[i],ntree=2000)
varImpPlot(forestmodel)
print (paste("Model: ",i, "ntree= ",2000,"mtry= ",bestmtry[i],"Accuracy= ",acc,sep=" "))
}
set.seed(1)
tr.control = trainControl(method = "cv", number = 10)
bestmtry<-vector()
for (i in 6:8){
treeGrid = expand.grid( .mtry= seq(1,model(i)[[2]],1))
tr = train(model(i)[[1]], data = dataTrain, method = "rf", trControl = tr.control, tuneGrid = treeGrid)
tr
# Extract ntree
best.forest = tr$finalModel
prp(best.tree)
bestmtry[i]=tr$results$mtry[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
forestmodel<-randomForest(model(i)[[1]], data=dataTrain,importance=TRUE,mtry=bestmtry[i],ntree=2000)
varImpPlot(forestmodel)
print (paste("Model: ",i, "ntree= ",2000,"mtry= ",bestmtry[i],"Accuracy= ",acc,sep=" "))
}
set.seed(1)
tr.control = trainControl(method = "cv", number = 10)
bestmtry<-vector()
for (i in 6:8){
treeGrid = expand.grid( .mtry= seq(1,model(i)[[2]],1))
tr = train(model(i)[[1]], data = dataTrain, method = "rf", trControl = tr.control, tuneGrid = treeGrid)
tr
# Extract ntree
best.forest = tr$finalModel
prp(best.tree)
bestmtry[i]=tr$results$mtry[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
forestmodel<-randomForest(model(i)[[1]], data=dataTrain,importance=TRUE,mtry=bestmtry[i],ntree=2000)
varImpPlot(forestmodel)
print (paste("Model: ",i, "ntree= ",2000,"mtry= ",bestmtry[i],"Accuracy= ",acc,sep=" "))
}
tr$results
set.seed(1)
tr.control = trainControl(method = "cv", number = 10)
bestmtry<-vector()
for (i in 6:8){
treeGrid = expand.grid( .mtry= seq(1,model(i)[[2]],1))
tr = train(model(i)[[1]], data = dataTrain, method = "rf", trControl = tr.control, tuneGrid = treeGrid)
tr
# Extract ntree
best.forest = tr$finalModel
prp(best.tree)
bestmtry[i]=tr$results$mtry[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
forestmodel<-randomForest(model(i)[[1]], data=dataTrain,importance=TRUE,mtry=bestmtry[i],ntree=2000)
varImpPlot(forestmodel)
print (paste("Model: ",i, "ntree= ",2000,"mtry= ",bestmtry[i],"Accuracy= ",max(tr$results$Accuracy),sep=" "))
}
tr$results
set.seed(1)
forestmodel<-randomForest(model(7)[[1]], data=dataTrain,importance=TRUE,ntree=2000,mtry=5)
varImpPlot(forestmodel)
set.seed(1)
rf.pred<-predict(forestmodel, newdata = dataTest)
submission<-data.frame(dataTest$PassengerId,rf.pred)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/rf7n2000m5.csv",sep=",",row.names=FALSE)
names(getModelInfo())
?cforestStats
?cforestStats
?cforest
library(party)
?cforest
library(party)
set.seed(1)
tr.control = trainControl(method = "repeatedcv", number = 10,repeats=10)
for (i in 6:8){
set.seed(1)
cGrid = expand.grid( .mtry= seq(3,model(i)[[2]],0.5))
tr = train(model(i)[[1]], data = dataTrain, method = "cforest", trControl = tr.control, tuneGrid = cGrid)
bestmtry=tr$results$mtry[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",i, "ntree= ",2000,"mtry= ",bestmtry,"Accuracy= ",max(tr$results$Accuracy),sep=" "))
}
model<-function(x){
md=list(8)
md[[1]]<-c(as.formula("as.factor(Survived)~Sex+Pclass"),2)
md[[2]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare"),3)
md[[3]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age"),4)
md[[4]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age+SibSp+Parch"),6) # Age na rows removed
md[[5]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age+Title +FamilyID2+FamilySize +Cabin"),8)
md[[6]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID"),10)
md[[7]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID+Cabin"),11)
md[[8]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age +Fare + Embarked + Title + FamilySize + FamilyID+Cabin"),9)
md[[x]]
}
#install.packages('party')
# names(getModelInfo()) gives available train methods
library(party)
set.seed(1)
tr.control = trainControl(method = "repeatedcv", number = 10,repeats=10)
for (i in 6:8){
set.seed(1)
cGrid = expand.grid( .mtry= seq(3,model(i)[[2]],0.5))
tr = train(model(i)[[1]], data = dataTrain, method = "cforest", trControl = tr.control, tuneGrid = cGrid)
bestmtry=tr$results$mtry[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",i, "ntree= ",2000,"mtry= ",bestmtry,"Accuracy= ",max(tr$results$Accuracy),sep=" "))
}
library(party)
set.seed(1)
tr.control = trainControl(method = "cv", number = 10)
for (i in 6:8){
set.seed(1)
cGrid = expand.grid( .mtry= seq(3,model(i)[[2]],0.5))
tr = train(model(i)[[1]], data = dataTrain, method = "cforest", trControl = tr.control, tuneGrid = cGrid)
bestmtry=tr$results$mtry[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",i, "ntree= ",2000,"mtry= ",bestmtry,"Accuracy= ",max(tr$results$Accuracy),sep=" "))
}
library(party)
set.seed(1)
tr.control = trainControl(method = "cv", number = 10)
for (i in 6:8){
set.seed(1)
cGrid = expand.grid( .mtry= c(4,5,6))
tr = train(model(i)[[1]], data = dataTrain, method = "cforest", trControl = tr.control, tuneGrid = cGrid)
bestmtry=tr$results$mtry[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",i, "ntree= ",2000,"mtry= ",bestmtry,"Accuracy= ",max(tr$results$Accuracy),sep=" "))
}
tr$results
cmodel<-cforest(model(8)[[1]], data=train,controls=cforest_unbiased(ntree=2000, mtry=5))
c.pred<-predict(cmodel, newdata = test,OOB=TRUE, type = "response")
acc<-sum(c.pred==test$Survived)/nrow(test)
acc
cmodel<-cforest(model(7)[[1]], data=train,controls=cforest_unbiased(ntree=2000, mtry=5))
c.pred<-predict(cmodel, newdata = test,OOB=TRUE, type = "response")
acc<-sum(c.pred==test$Survived)/nrow(test)
acc
cmodel<-cforest(model(8)[[1]], data=dataTrain,controls=cforest_unbiased(ntree=2000, mtry=5))
c.pred<-predict(cmodel, newdata = dataTest,OOB=TRUE, type = "response")
submission<-data.frame(dataTest$PassengerId,c.pred)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/cf8_m5_n2000.csv",sep=",",row.names=FALSE)
cmodel<-cforest(model(7)[[1]], data=dataTrain,controls=cforest_unbiased(ntree=2000, mtry=3))
# Number of folds
library(e1071)
library(kernlab)
ibest<-0
costbest<-0
accbest<-0
gammabest<-0
costs<-c(10,15,20,25,30,35,40,45,50,55,60)
set.seed(2)
tr.control = trainControl(method = "cv", number = 10)
for (j in 7:7){
#start()
SVMGrid = expand.grid( .C=c(15,20,25),.sigma= c(.33,0.5,0.67)/ncol(train))
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
tr
best.svm = tr$finalModel
#prp(best.tree)
accuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ","7","cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(tr$results$Accuracy,6),sep=" "))
if (acc > accbest){
accbest=acc
ibest =j
costbest=bestcost
gammabest<-bestgamma
}
}
warnigs()
warnings()
set.seed(2)
tr.control = trainControl(method = "cv", number = 10)
for (j in 6:8){
#start()
SVMGrid = expand.grid( .C=c(1,3,10,30,100),.sigma= c(.33,0.5,0.67,1,1.5)/ncol(model(j)[[2]]))
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
set.seed(2)
tr.control = trainControl(method = "cv", number = 10)
for (j in 6:8){
#start()
SVMGrid = expand.grid( .C=c(1,3,10,30,100),.sigma= c(.33,0.5,0.67,1,1.5)/model(j)[[2]])
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
models(8)[[2]]
model(8)[[2]]
.33/9
for (j in 8:8){
#start()
SVMGrid = expand.grid( .C=c(0.3,1,3,10,30,100),.sigma= c(.1,.33,0.5,0.67,1,1.5)/model(j)[[2]])
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
.1/9
for (j in 8:8){
#start()
SVMGrid = expand.grid( .C=c(100,200,300),.sigma= c(.01,.03,.1,.33,0.5)/model(j)[[2]])
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
set.seed(2)
tr.control = trainControl(method = "cv", number = 10)
for (j in 8:8){
#start()
SVMGrid = expand.grid( .C=c(150,200,250),.sigma= c(.03,.067,.1,.2,.33)/model(j)[[2]])
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
print (tr$results)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
for (j in 8:8){
#start()
SVMGrid = expand.grid( .C=c(150,200,250),.sigma= c(.03,.067,.1,.2,.33)/model(j)[[2]])
set.seed(2)
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
print (tr$results)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
.03/9
for (j in 8:8){
#start()
SVMGrid = expand.grid( .C=c(1,200,250,300),.sigma= c(0.01,0.02,.03)/model(j)[[2]])
set.seed(2)
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
print (tr$results)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
.01/9
.03/9
for (j in 8:8){
#start()
SVMGrid = expand.grid( .C=c(300,350,400),.sigma= c(0.02,.03,.05,.1)/model(j)[[2]])
set.seed(2)
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
print (tr$results)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
for (j in 8:8){
#start()
SVMGrid = expand.grid( .C=c(400,500,600),.sigma= c(0.02,.03,.05,.1)/model(j)[[2]])
set.seed(2)
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
print (tr$results)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
for (j in 8:8){
#start()
SVMGrid = expand.grid( .C=c(400,500,600,1000),.sigma= c(0.02,.03,.05,.1,1)/model(j)[[2]])
set.seed(2)
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
print (tr$results)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
for (j in 8:8){
#start()
SVMGrid = expand.grid( .C=c(600,800,1000,1200),.sigma= c(0.01,0.02,.03)/model(j)[[2]])
set.seed(2)
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
print (tr$results)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
for (j in 8:8){
#start()
SVMGrid = expand.grid( .C=c(1000,1200,1400,1600),.sigma= c(0.001,0.003,0.01)/model(j)[[2]])
set.seed(2)
tr = train(model(j)[[1]], data = dataTrain, method = "svmRadial", trControl = tr.control, tuneGrid = SVMGrid)
print (tr$results)
bestaccuracy<-max(tr$results$Accuracy)
bestcost=tr$results$C[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
bestgamma=tr$results$sigma[which(tr$results$Accuracy==max(tr$results$Accuracy))][1]
print (paste("Model: ",j,"cost: ",bestcost,"gamma: ",round(bestgamma,6), "Accuracy: ",round(bestaccuracy,6),sep=" "))
}
?svm
SVMmodel <- svm(model(8)[[1]], data=train,cost=1200,gamma=gammabest)
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
SVMmodel <- svm(model(8)[[1]], data=train,cost=1200,gamma=0.0011)
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
set.seed(2)
SVMmodel <- svm(model(8)[[1]], data=train,cost=1200,gamma=0.0011)
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
set.seed(2)
SVMmodel <- svm(model(8)[[1]], data=dataTrain,cost=1200,gamma=0.0011)
svm.pred = predict(SVMmodel, newdata = dataTest)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
submission<-data.frame(dataTest$PassengerId,svm.pred)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/svm8c1200g0011.csv",sep=",",row.names=FALSE)
#dataTest$Survived=rep(0,length(nrow(dataTest)))
set.seed(2)
SVMmodel <- svm(model(8)[[1]], data=dataTrain,cost=1200,gamma=0.0011)
svm.pred = predict(SVMmodel, newdata = dataTest)
#acc<-sum(svm.pred==test$Survived)/nrow(test)
#acc
submission<-data.frame(dataTest$PassengerId,svm.pred)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/svm8c1200g0011.csv",sep=",",row.names=FALSE)
