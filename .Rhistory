X=matrix(100,20,5)
X
X=matrix(seq(1,100),20,5)
X=matrix(seq(1,100),20,5)
X
X %*% matrix(1,ncol(X) )
X%*%diag(ncol(X))
diag(ncol(X))
diag(X)
?diag
X
diag(X)
diag(ncol(X))
diag(5)
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
nx<-5
ny<-7
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
X
crossprod(X)
XtX = t(X) %*% X
XtX[ 1,1 ]
XtX
library(devtools)
install_github("genomicsclass/GSE5859Subset")
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
head(sampleInfo)
theDate="2005-06-27"
thisDate<-sampleInfo[sampleInfo[,2]==theDate,]
nrow(thisDate)
thisDate
theDate="2005-06-27"
thisDate<-sampleInfo[sampleInfo$date==theDate,]
nrow(thisDate)
sum(sampleInfo$date=="2005-06-27")
library(MASS)
library(ISLR)
regplot=function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price,Sales)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
0.014/0.986
7.5*.014
library(ISLR)
data(Autos)
data(Auto)
str(Auto)
fit<-m(mpg~., data = Auto);summary(fit)
fit<-(mpg~., data = Auto)
fit<-lm(mpg~., data = Auto)
summary(fit)
fit<-lm(mpg~.-name, data = Auto)
summary(fit)
table(Auto$name)
length(unique(Auto$name))
lengtgh(Auto$name)
length(Auto$name)
autoAll = lm(mpg~.-name, data = Auto)
summary(autoAll)
dbinom(2,4,0.49)
?dbinom
dbinom(4,10,0.49)
1-pbinom(10,20,0.4)
1-pbinom(1,N,prob)
prob<-1/175223510
N<-189000000
1-pbinom(1,N,prob)
1-pbinom(0,N,prob)
1-pbinom(0,2,0.5)
1-pbinom(10,20,0.4)
1-pbinom(1,N,prob)
1 - dbinom(0, 189000000, 1/175223510)
pbinom(4.5,20,0.4)-pbinom(3.5,20,0.4)
pbinom(9,20,0.4)-pbinom(7,20,0.4)
N<-20
p<-0.4
mean<-N*p
sd<-N*p*(1-p)
sd
pnorm(2)
pnorm(1.96)
pnorm(1/4.8)-pnorm(-1/4.8)
pnorm(-1/4.8)
pnorm(1/4.8)
N<-20
p<-0.4
mean<-N*p
sd<-sqrt(N*p*(1-p))
pnorm(1/sd)-pnorm(-1/sd)
b <- (9 - 20*.4)/sqrt(20*.4*.6)
a <- (7 - 20*.4)/sqrt(20*.4*.6)
pnorm(b)-pnorm(a)
1-pbinom(500,1000,0.4)
1-pbinom(500,1000,0.4)
b<-(500 - 1000*.4)/sqrt(1000*.4*.6)
1-pnorm(b)
b<-(450 - 1000*.4)/sqrt(1000*.4*.6)
a<-(350 - 1000*.4)/sqrt(1000*.4*.6)
pnorm(b)-pnorm(a)
pbinom(450,1000,0.4)-pbinom(350,1000,0.4)
exact<-pbinom(450,1000,0.4)-pbinom(350,1000,0.4)
b<-(450 - 1000*.4)/sqrt(1000*.4*.6)
a<-(350 - 1000*.4)/sqrt(1000*.4*.6)
normApprox<-pnorm(b)-pnorm(a)
exact-normApprox
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
for (N in Ns){
2*N
}
probs=data.frame(c("exact","approx"))
probs=data.frame("exact","approx")
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
probs=data.frame("exact","approx")
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=rbind(probs,c(exact,approx))
}
}
probs
probs<-data.frame(exact=numeric(),approx=numeric())
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=rbind(probs,c(exact,approx))
}
}
probs
N<-6
k<-seq(1,N-1)
k
N<-5
p<-0.01
k<-seq(1,N-1)
k
exact = dbinom(k,N,p)
exact
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=rbind(probs,c(exact,approx))
approx
probs
probs<-data.frame(exact=numeric(),approx=numeric())
probs
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=rbind(probs,c(exact,approx))
probs
probs=cbind(exact,approx)
probs
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
probs<-data.frame(exact=numeric(),approx=numeric())
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=cbind(exact,approx)
plot(exact,approx)
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
probs<-data.frame(exact=numeric(),approx=numeric())
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=cbind(exact,approx)
plot(exact,approx)
abline(0,1,col="red")
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
probs<-data.frame(exact=numeric(),approx=numeric())
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=cbind(exact,approx)
plot(exact,approx,main=N)
abline(0,1,col="red")
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
probs<-data.frame(exact=numeric(),approx=numeric())
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=cbind(exact,approx)
plot(exact,approx,main="N=",N,"p=",p)
abline(0,1,col="red")
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
probs<-data.frame(exact=numeric(),approx=numeric())
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=cbind(exact,approx)
plot(exact,approx,main=paste("N=",N," p=",p))
abline(0,1,col="red")
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
probs<-data.frame(exact=numeric(),approx=numeric())
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=cbind(exact,approx)
plot(exact,approx,main=paste("N=",N," p=",p))
abline(0,1,col="red")
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
library(rafalib)
mypar2(4,5)
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
LIM <- range(c(approx,exact))
plot(exact,approx,main=paste("N =",N," p = ",p),xlim=LIM,ylim=LIM,col=1,pch=16)
abline(0,1)
}
}
mypar(4,5)
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
library(rafalib)
mypar(4,5)
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
LIM <- range(c(approx,exact))
plot(exact,approx,main=paste("N =",N," p = ",p),xlim=LIM,ylim=LIM,col=1,pch=16)
abline(0,1)
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
#library(rafalib)
mypar(4,5)
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
LIM <- range(c(approx,exact))
plot(exact,approx,main=paste("N =",N," p = ",p),xlim=LIM,ylim=LIM,col=1,pch=16)
abline(0,1)
}
}
library(devtools)
install_github("genomicsclass/dagdata")
library(dagdata)
data(hcmv)
library(rafalib)
mypar()
plot(locations,rep(1,length(locations)),ylab="",yaxt="n")
breaks=seq(0,4000*round(max(locations)/4000),4000)
tmp=cut(locations,breaks)
counts=as.numeric(table(tmp))
hist(counts)
probs <- dpois(counts,4)
likelihood <- prod(probs)
likelihood
?prod
logprobs <- dpois(counts,4,log=TRUE)
loglikelihood <- sum(logprobs)
loglikelihood
?dpois
$\tiny{2}\\small{4}\large{8}\huge{16}$
setwd("C:/Users/Mike/Rspace/Titanic")
require(gbm)
train=sample(1:nrow(dataTrain),600)
boost.titanic=gbm(model(9)[[1]],data=dataTrain[train,],distribution="bernoulli",n.trees=10000,shrinkage=0.01,interaction.depth=4)
summary(boost.titanic)
plot(boost.titanic,i="Fare")
plot(boost.titanic,i="Age")
set.seed(1)
rm(list=ls())
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
#str(dataTrain)
#summary(dataTrain)
dataTest$Survived <- NA
combi <- rbind(dataTrain, dataTest)
summary(combi)
summary(combi$Embarked)
combi$Embarked[which(combi$Embarked == '')]<-"S"
summary(combi$Embarked)
combi$Embarked <- factor(combi$Embarked)
summary(combi$Embarked)
# make title variable
combi$Name <- as.character(combi$Name)
#strsplit(combi$Name[1], split='[,.]')[[1]][2]
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle','Ms')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir','Jonkheer')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess')] <- 'Lady'
table(combi$Title)
combi$Title<-factor(combi$Title)
# make family size variable
combi$FamilySize <- combi$SibSp + combi$Parch + 1
# make familyID variable
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
table(combi$FamilyID)
# reduce levels
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
combi$FamilyID2 <- factor(combi$FamilyID2)
# make cabin variable
cabins<-function(x){
cabinLevels<-c("A","B","C","D","E","F","G","H","T")
x<-as.character(x)
x<-substr(x, 1, 1)
x[x==""] <- "H"
newX<-as.factor(x)
levels(newX)<-cabinLevels
invisible(newX)
}
combi$Cabin<-cabins(combi$Cabin)
#normalise age variable
combi$Age<-(combi$Age-mean(combi$Age,na.rm=TRUE))/sd(combi$Age,na.rm=TRUE)
library(rpart)
# impute missing age values
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Age),], method="anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
summary(combi$Age)
# impute missing fare value
Farefit <- rpart(Fare ~ Pclass + Sex + SibSp + Parch + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Fare),], method="anova")
combi$Fare[is.na(combi$Fare)] <- predict(Farefit, combi[is.na(combi$Fare),])
summary(combi$Fare)
Farefit <- rpart(Fare ~ Pclass + Sex + SibSp + Parch + Embarked + Title + FamilySize,
data=combi[combi$Fare!=0,], method="anova")
combi$Fare[combi$Fare==0] <- predict(Farefit, combi[combi$Fare==0,])
summary(combi$Fare)
#transform fare values
combi$Fare<-log(combi$Fare)
hist(combi$Fare)
summary(combi$Fare)
dataTrain <- combi[1:891,]
dataTest <- combi[892:1309,]
table(dataTrain$Cabin)
table(dataTest$Cabin)
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.8)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
table(train$Cabin)
table(test$Cabin)
#   sex="female"
#   # train on one gender at a time
#   train<-subset(train,Sex==sex)
#   #train$Sex<-factor(train$Sex)
#   test<-subset(test,Sex==sex)
#   #test$Sex<-factor(test$Sex)
#   dataTest<-subset(dataTest,Sex==sex)
#   #dataTest$Sex<-factor(dataTest$Sex)
#train$Survived<-as.factor(train$Survived)
#test$Survived<-as.factor(test$Survived)
#   train$Cabin<-as.factor(train$Cabin)
#   test$Cabin<-as.factor(test$Cabin)
#   train$Cabin<-factor(train$Cabin)
#   test$Cabin<-factor(test$Cabin)
#   levels(test$Cabin) <- levels(train$Cabin)
## Models
model<-function(x){
md=list(8)
md[[1]]<-c(as.formula("as.factor(Survived)~Sex+Pclass"),2)
md[[2]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare"),3)
md[[3]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+FamilySize"),4)
md[[4]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age+FamilySize"),5) # Age na rows removed
md[[5]]<-c(as.formula("as.factor(Survived)~Sex+Pclass+Fare+Age+Title +FamilyID2+FamilySize +Cabin"),8)
md[[6]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2"),10)
md[[7]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2+Cabin"),11)
md[[8]]<-c(as.formula("as.factor(Survived) ~ Pclass + Sex + Age +Fare + Embarked + Title + FamilySize + FamilyID2+Cabin"),9)
md[[9]]<-c(as.formula("Survived ~ Pclass + Sex + Age +Fare + Embarked + Title + FamilySize + FamilyID2+Cabin"),9)
md[[x]]
}
require(gbm)
train=sample(1:nrow(dataTrain),600)
boost.titanic=gbm(model(9)[[1]],data=dataTrain[train,],distribution="bernoulli",n.trees=10000,shrinkage=0.01,interaction.depth=4)
summary(boost.titanic)
plot(boost.titanic,i="Fare")
plot(boost.titanic,i="Age")
n.trees=seq(from=100,to=10000,by=100)
predmat=predict(boost.titanic,newdata=dataTrain[-train,],n.trees=n.trees,type="response")
dim(predmat)
predmat=ifelse(predmat>0.5,1,0)
#berr=with(dataTrain[-train,],apply( (predmat-medv)^2,2,mean))
test.acc=double(ncol(predmat))
for (i in 1:ncol(predmat)){
test.acc[i]=sum(predmat[,i]==dataTrain[-train,]$Survived)/nrow(dataTrain[-train,])
}
plot(n.trees,test.acc,pch=19,ylab="Accuracy", xlab="# Trees",main="Boosting Test Error")
#a
n.trees=seq(from=100,to=10000,by=100)
predmat=predict(boost.titanic,newdata=dataTrain[-train,],n.trees=n.trees,type="response")
dim(predmat)
predmat=ifelse(predmat>0.5,1,0)
#berr=with(dataTrain[-train,],apply( (predmat-medv)^2,2,mean))
test.acc=double(ncol(predmat))
for (i in 1:ncol(predmat)){
test.acc[i]=sum(predmat[,i]==dataTrain[-train,]$Survived)/nrow(dataTrain[-train,])
}
plot(n.trees,test.acc,pch=19,ylab="Accuracy", xlab="# Trees",main="Boosting Test Error")
#a
n.trees=seq(from=100,to=10000,by=100)
predmat=predict(boost.titanic,newdata=dataTrain[-train,],n.trees=n.trees,type="response")
dim(predmat)
predmat=ifelse(predmat>0.5,1,0)
#berr=with(dataTrain[-train,],apply( (predmat-medv)^2,2,mean))
test.acc=double(ncol(predmat))
for (i in 1:ncol(predmat)){
test.acc[i]=sum(predmat[,i]==dataTrain[-train,]$Survived)/nrow(dataTrain[-train,])
}
plot(n.trees,test.acc,pch=19,ylab="Accuracy", xlab="# Trees",main="Boosting Test Error")
#a
boost.pred=predict(boost.titanic,newdata=dataTest,n.trees=2000,type="response")
boost.pred=ifelse(pred>0.5,1,0)
submission<-data.frame(dataTest$PassengerId,boost.pred)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/boost9_n2000.csv",sep=",",row.names=FALSE)
set.seed(567)
n.trees=seq(from=100,to=10000,by=100)
predmat=predict(boost.titanic,newdata=dataTrain[-train,],n.trees=n.trees,type="response")
dim(predmat)
predmat=ifelse(predmat>0.5,1,0)
#berr=with(dataTrain[-train,],apply( (predmat-medv)^2,2,mean))
test.acc=double(ncol(predmat))
for (i in 1:ncol(predmat)){
test.acc[i]=sum(predmat[,i]==dataTrain[-train,]$Survived)/nrow(dataTrain[-train,])
}
plot(n.trees,test.acc,pch=19,ylab="Accuracy", xlab="# Trees",main="Boosting Test Error")
#abline(h=min(test.err),col="red")
set.seed(567)
boost.pred=predict(boost.titanic,newdata=dataTest,n.trees=2000,type="response")
boost.pred=ifelse(boost.pred>0.5,1,0)
submission<-data.frame(dataTest$PassengerId,boost.pred)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/boost9_n2000.csv",sep=",",row.names=FALSE)
