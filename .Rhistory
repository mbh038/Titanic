train$Cabin[271]="H"
dataTest$Cabin[118]="H"
#   # train on one gender at a time
#   train<-subset(train,Sex=="male")
#   #train$Sex<-factor(train$Sex)
#   test<-subset(test,Sex=="male")
#   #test$Sex<-factor(test$Sex)
#   dataTest<-subset(dataTest,Sex=="male")
#   #dataTest$Sex<-factor(dataTest$Sex)
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
train$Cabin<-as.factor(train$Cabin)
test$Cabin<-as.factor(test$Cabin)
train$Cabin<-factor(train$Cabin)
test$Cabin<-factor(test$Cabin)
levels(test$Cabin) <- levels(train$Cabin)
## Models
model<-function(x){
md=list(5)
md[[1]]<-as.formula("Survived~Pclass+Fare")
md[[2]]<-as.formula("Survived~Pclass+Fare+Age")
md[[3]]<-as.formula("Survived~Pclass+Fare+Age+Cabin+SibSp+Parch") # Age na rows removed
md[[4]]<-as.formula("Survived~Pclass+Fare+Age+Cabin")
md[[5]]<-as.formula("Survived~Pclass+Fare+Age+Cabin+SibSp+Parch+Ticket")
md[[x]]
}
library(e1071)
for (j in 1:5){
#start()
SVMmodel <- svm(model(j), data=train)
svm.probs = predict(SVMmodel, newdata = test)
svm.pred=rep(0,length(svm.probs))
svm.pred[svm.probs>0.5]=1
print (sum(svm.pred==test$Survived)/nrow(test))
}
library(randomForest)
library(caret)
library(rpart)
library(tree)
library(randomForest)
accbest=0
ibest=0
for (i in 1:4){
#Tstart()
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
train$Cabin<-as.factor(train$Cabin)
test$Cabin<-as.factor(test$Cabin)
train$Cabin<-factor(train$Cabin)
test$Cabin<-factor(test$Cabin)
levels(test$Cabin) <- levels(train$Cabin)
forestmodel<-randomForest(model(i), data=train)
rf.probs = predict(forestmodel, newdata = test)
acc=sum(rf.probs==test$Survived)/nrow(test)
print (acc)
if (acc > accbest){
accbest=acc
ibest =i
}
importance(forestmodel)
}
set.seed(1)
rm(list=ls())
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
#str(dataTrain)
#summary(dataTrain)
dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTest$Cabin<-as.factor(dataTest$Cabin)
dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
for (i in 1:length(dataTrain$Cabin)){
if (dataTrain$Cabin[i]=="") dataTrain$Cabin[i]="H"
}
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
for (i in 1:length(dataTest$Cabin)){
if (dataTest$Cabin[i]=="") dataTest$Cabin[i]="H"
if (dataTest$Cabin[i]=="G") dataTest$Cabin[i]="H"
}
# set.seed(1000)
# train_index=sample(seq(nrow(dataTrain)),418,replace=FALSE)
# train=dataTrain[train_index,]
# test=dataTrain[-train_index,]
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.5)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
train$Cabin[271]="H"
dataTest$Cabin[118]="H"
#   # train on one gender at a time
#   train<-subset(train,Sex=="male")
#   #train$Sex<-factor(train$Sex)
#   test<-subset(test,Sex=="male")
#   #test$Sex<-factor(test$Sex)
#   dataTest<-subset(dataTest,Sex=="male")
#   #dataTest$Sex<-factor(dataTest$Sex)
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
train$Cabin<-as.factor(train$Cabin)
test$Cabin<-as.factor(test$Cabin)
train$Cabin<-factor(train$Cabin)
test$Cabin<-factor(test$Cabin)
levels(test$Cabin) <- levels(train$Cabin)
## Models
model<-function(x){
md=list(5)
md[[1]]<-as.formula("Survived~Pclass+Fare")
md[[2]]<-as.formula("Survived~Pclass+Fare+Age")
md[[3]]<-as.formula("Survived~Pclass+Fare+Age+Cabin+SibSp+Parch") # Age na rows removed
md[[4]]<-as.formula("Survived~Pclass+Fare+Age+Cabin")
md[[5]]<-as.formula("Survived~Pclass+Fare+Age+Cabin+SibSp+Parch+Ticket")
md[[x]]
}
# logistic Regression model
for (j in 1:4){
#Tstart()
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
glm.fit=glm(model(j),data=train,family=binomial)
glm.probs<- predict(glm.fit, newdata = test, type = "response")
# find optimum threshold
maxThreshold<-0
glm.accMax<-0
thresholds<-seq(.2, .9, length.out=50 )
glm.acc=rep(0,length(thresholds))
for (i in 1:length(thresholds)){
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>thresholds[i]]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
if (glm.acc[i] > glm.accMax) {
glm.accMax = glm.acc[i]
maxThreshold=thresholds[i]
}
}
plot(thresholds,glm.acc)
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>maxThreshold]=1
print (sum(glm.pred==test$Survived)/nrow(test))
}
set.seed(1)
rm(list=ls())
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
#str(dataTrain)
#summary(dataTrain)
dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTest$Cabin<-as.factor(dataTest$Cabin)
dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
for (i in 1:length(dataTrain$Cabin)){
if (dataTrain$Cabin[i]=="") dataTrain$Cabin[i]="H"
}
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
for (i in 1:length(dataTest$Cabin)){
if (dataTest$Cabin[i]=="") dataTest$Cabin[i]="H"
if (dataTest$Cabin[i]=="G") dataTest$Cabin[i]="H"
}
# set.seed(1000)
# train_index=sample(seq(nrow(dataTrain)),418,replace=FALSE)
# train=dataTrain[train_index,]
# test=dataTrain[-train_index,]
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.5)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
train$Cabin[271]="H"
dataTest$Cabin[118]="H"
#   # train on one gender at a time
#   train<-subset(train,Sex=="male")
#   #train$Sex<-factor(train$Sex)
#   test<-subset(test,Sex=="male")
#   #test$Sex<-factor(test$Sex)
#   dataTest<-subset(dataTest,Sex=="male")
#   #dataTest$Sex<-factor(dataTest$Sex)
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
train$Cabin<-as.factor(train$Cabin)
test$Cabin<-as.factor(test$Cabin)
train$Cabin<-factor(train$Cabin)
test$Cabin<-factor(test$Cabin)
levels(test$Cabin) <- levels(train$Cabin)
set.seed(1)
rm(list=ls())
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
#str(dataTrain)
#summary(dataTrain)
dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTest$Cabin<-as.factor(dataTest$Cabin)
dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
for (i in 1:length(dataTrain$Cabin)){
if (dataTrain$Cabin[i]=="") dataTrain$Cabin[i]="H"
}
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
for (i in 1:length(dataTest$Cabin)){
if (dataTest$Cabin[i]=="") dataTest$Cabin[i]="H"
if (dataTest$Cabin[i]=="G") dataTest$Cabin[i]="H"
}
# set.seed(1000)
# train_index=sample(seq(nrow(dataTrain)),418,replace=FALSE)
# train=dataTrain[train_index,]
# test=dataTrain[-train_index,]
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.5)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
train$Cabin[271]="H"
dataTest$Cabin[118]="H"
#   # train on one gender at a time
#   train<-subset(train,Sex=="male")
#   #train$Sex<-factor(train$Sex)
#   test<-subset(test,Sex=="male")
#   #test$Sex<-factor(test$Sex)
#   dataTest<-subset(dataTest,Sex=="male")
#   #dataTest$Sex<-factor(dataTest$Sex)
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
#train$Cabin<-as.factor(train$Cabin)
#test$Cabin<-as.factor(test$Cabin)
#train$Cabin<-factor(train$Cabin)
#test$Cabin<-factor(test$Cabin)
#levels(test$Cabin) <- levels(train$Cabin)
## Models
model<-function(x){
md=list(5)
md[[1]]<-as.formula("Survived~Pclass+Fare")
md[[2]]<-as.formula("Survived~Pclass+Fare+Age")
md[[3]]<-as.formula("Survived~Pclass+Fare+Age+SibSp+Parch") # Age na rows removed
md[[4]]<-as.formula("Survived~Pclass+Fare+Age")
md[[5]]<-as.formula("Survived~Pclass+Fare+Age+SibSp+Parch+Ticket")
md[[x]]
}
for (j in 1:4){
#Tstart()
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
glm.fit=glm(model(j),data=train,family=binomial)
glm.probs<- predict(glm.fit, newdata = test, type = "response")
# find optimum threshold
maxThreshold<-0
glm.accMax<-0
thresholds<-seq(.2, .9, length.out=50 )
glm.acc=rep(0,length(thresholds))
for (i in 1:length(thresholds)){
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>thresholds[i]]=1
glm.acc[i]<-sum(glm.pred==test$Survived)/nrow(test)
if (glm.acc[i] > glm.accMax) {
glm.accMax = glm.acc[i]
maxThreshold=thresholds[i]
}
}
plot(thresholds,glm.acc)
glm.pred=rep(0,length(test$Survived))
glm.pred[glm.probs>maxThreshold]=1
print (sum(glm.pred==test$Survived)/nrow(test))
}
set.seed(1)
rm(list=ls())
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
#str(dataTrain)
#summary(dataTrain)
dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTest$Cabin<-as.factor(dataTest$Cabin)
dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
for (i in 1:length(dataTrain$Cabin)){
if (dataTrain$Cabin[i]=="") dataTrain$Cabin[i]="H"
}
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
for (i in 1:length(dataTest$Cabin)){
if (dataTest$Cabin[i]=="") dataTest$Cabin[i]="H"
if (dataTest$Cabin[i]=="G") dataTest$Cabin[i]="H"
}
# set.seed(1000)
# train_index=sample(seq(nrow(dataTrain)),418,replace=FALSE)
# train=dataTrain[train_index,]
# test=dataTrain[-train_index,]
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.5)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
train$Cabin[271]="H"
dataTest$Cabin[118]="H"
#   # train on one gender at a time
#   train<-subset(train,Sex=="male")
#   #train$Sex<-factor(train$Sex)
#   test<-subset(test,Sex=="male")
#   #test$Sex<-factor(test$Sex)
#   dataTest<-subset(dataTest,Sex=="male")
#   #dataTest$Sex<-factor(dataTest$Sex)
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
#train$Cabin<-as.factor(train$Cabin)
#test$Cabin<-as.factor(test$Cabin)
#train$Cabin<-factor(train$Cabin)
#test$Cabin<-factor(test$Cabin)
#levels(test$Cabin) <- levels(train$Cabin)
## Models
model<-function(x){
md=list(5)
md[[1]]<-as.formula("Survived~Pclass+Fare")
md[[2]]<-as.formula("Survived~Pclass+Fare+Age")
md[[3]]<-as.formula("Survived~Pclass+Fare+Age+SibSp+Parch") # Age na rows removed
md[[4]]<-as.formula("Survived~Pclass+Fare+Age")
md[[5]]<-as.formula("Survived~Pclass+Fare+Age+SibSp+Parch+Ticket")
md[[x]]
}
library(rpart)
library(rpart.plot)
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
for (i in 1:5){
#Tstart()
CARTcp = rpart(model(i), data=train, method="class",cp=0.006)
prp(CARTcp)
# 2.4 accuracy
PredictCARTcp = predict(CARTcp, newdata = test, type = "class")
print (sum(PredictCARTcp==test$Survived)/nrow(test))
}
for (i in 1:5){
#Tstart()
CARTcp = rpart(model(i), data=train, method="class",cp=0.06)
prp(CARTcp)
# 2.4 accuracy
PredictCARTcp = predict(CARTcp, newdata = test, type = "class")
print (sum(PredictCARTcp==test$Survived)/nrow(test))
}
library(rpart)
library(rpart.plot)
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
for (i in 1:5){
#Tstart()
CARTcp = rpart(model(i), data=train, method="class",cp=0.003)
prp(CARTcp)
# 2.4 accuracy
PredictCARTcp = predict(CARTcp, newdata = test, type = "class")
print (sum(PredictCARTcp==test$Survived)/nrow(test))
}
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
for (i in 1:5){
#Tstart()
CARTcp = rpart(model(i), data=train, method="class",cp=0.006)
prp(CARTcp)
# 2.4 accuracy
PredictCARTcp = predict(CARTcp, newdata = test, type = "class")
print (sum(PredictCARTcp==test$Survived)/nrow(test))
}
accbest=0
ibest=0
for (i in 1:4){
#Tstart()
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
train$Cabin<-as.factor(train$Cabin)
test$Cabin<-as.factor(test$Cabin)
train$Cabin<-factor(train$Cabin)
test$Cabin<-factor(test$Cabin)
levels(test$Cabin) <- levels(train$Cabin)
forestmodel<-randomForest(model(i), data=train)
rf.probs = predict(forestmodel, newdata = test)
acc=sum(rf.probs==test$Survived)/nrow(test)
print (acc)
if (acc > accbest){
accbest=acc
ibest =i
}
importance(forestmodel)
}
accbest=0
ibest=0
for (i in 1:4){
#Tstart()
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
forestmodel<-randomForest(model(i), data=train)
rf.probs = predict(forestmodel, newdata = test)
acc=sum(rf.probs==test$Survived)/nrow(test)
print (acc)
if (acc > accbest){
accbest=acc
ibest =i
}
importance(forestmodel)
}
library(e1071)
for (j in 1:5){
#start()
SVMmodel <- svm(model(j), data=train)
svm.probs = predict(SVMmodel, newdata = test)
svm.pred=rep(0,length(svm.probs))
svm.pred[svm.probs>0.5]=1
print (sum(svm.pred==test$Survived)/nrow(test))
}
set.seed(1)
rm(list=ls())
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
#str(dataTrain)
#summary(dataTrain)
dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTest$Cabin<-as.factor(dataTest$Cabin)
dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
for (i in 1:length(dataTrain$Cabin)){
if (dataTrain$Cabin[i]=="") dataTrain$Cabin[i]="H"
}
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
for (i in 1:length(dataTest$Cabin)){
if (dataTest$Cabin[i]=="") dataTest$Cabin[i]="H"
if (dataTest$Cabin[i]=="G") dataTest$Cabin[i]="H"
}
# set.seed(1000)
# train_index=sample(seq(nrow(dataTrain)),418,replace=FALSE)
# train=dataTrain[train_index,]
# test=dataTrain[-train_index,]
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.5)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
train$Cabin[271]="H"
dataTest$Cabin[118]="H"
#   # train on one gender at a time
#   train<-subset(train,Sex=="male")
#   #train$Sex<-factor(train$Sex)
#   test<-subset(test,Sex=="male")
#   #test$Sex<-factor(test$Sex)
#   dataTest<-subset(dataTest,Sex=="male")
#   #dataTest$Sex<-factor(dataTest$Sex)
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
#train$Cabin<-as.factor(train$Cabin)
#test$Cabin<-as.factor(test$Cabin)
#train$Cabin<-factor(train$Cabin)
#test$Cabin<-factor(test$Cabin)
#levels(test$Cabin) <- levels(train$Cabin)
## Models
model<-function(x){
md=list(5)
md[[1]]<-as.formula("Survived~Pclass+Fare")
md[[2]]<-as.formula("Survived~Pclass+Fare+Age")
md[[3]]<-as.formula("Survived~Pclass+Fare+Age+SibSp+Parch") # Age na rows removed
md[[4]]<-as.formula("Survived~Pclass+Fare+Age")
md[[5]]<-as.formula("Survived~Pclass+Fare+Age+SibSp+Parch+Ticket")
md[[x]]
}
for (j in 1:5){
#start()
SVMmodel <- svm(model(j), data=train)
svm.probs = predict(SVMmodel, newdata = test)
svm.pred=rep(0,length(svm.probs))
svm.pred[svm.probs>0.5]=1
print (sum(svm.pred==test$Survived)/nrow(test))
}
library(e1071)
for (j in 1:5){
#start()
SVMmodel <- svm(model(j), data=train)
svm.probs = predict(SVMmodel, newdata = test)
svm.pred=rep(0,length(svm.probs))
#svm.pred[svm.probs>0.5]=1
print (sum(svm.pred==test$Survived)/nrow(test))
}
