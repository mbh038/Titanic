dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
# set.seed(1000)
# train_index=sample(seq(nrow(dataTrain)),418,replace=FALSE)
# train=dataTrain[train_index,]
# test=dataTrain[-train_index,]
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.8)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
# Decision tree using CART
library(rpart)
library(rpart)
library(rpart.plot)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age) # Age na rows removed
fol3=formula(Survived~Pclass+Sex+Fare+Age+Parch) # Age na rows removed
CARTmodel <- rpart(fol3, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age) # Age na rows removed
fol3=formula(Survived~Pclass+Sex+Fare+Age+Parch) # Age na rows removed
CARTmodel <- rpart(fol2, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age) # Age na rows removed
fol3=formula(Survived~Pclass+Sex+Fare+Age+Parch+SibSp) # Age na rows removed
CARTmodel <- rpart(fol3, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
CART.pred<-predict(CARTmodel, newdata = dataTest, type = "class")
submission<-data.frame(dataTest$PassengerId,as.numeric(CART.pred)-1)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/cart2_impute.csv",sep=",",row.names=FALSE)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age) # Age na rows removed
fol3=formula(Survived~Pclass+Sex+Fare+Age+Parch+SibSp) # Age na rows removed
CARTmodel <- rpart(fol2, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
#submit
CART.pred<-predict(CARTmodel, newdata = dataTest, type = "class")
submission<-data.frame(dataTest$PassengerId,as.numeric(CART.pred)-1)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/cart3_impute.csv",sep=",",row.names=FALSE)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age) # Age na rows removed
fol3=formula(Survived~Pclass+Sex+Fare+Age+Parch+SibSp) # Age na rows removed
CARTmodel <- rpart(fol2, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
#submit
CART.pred<-predict(CARTmodel, newdata = dataTest, type = "class")
submission<-data.frame(dataTest$PassengerId,as.numeric(CART.pred)-1)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/cart2_impute.csv",sep=",",row.names=FALSE)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age) # Age na rows removed
fol3=formula(Survived~Pclass+Sex+Fare+Age+Parch+SibSp) # Age na rows removed
CARTmodel <- rpart(fol3, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
#submit
CART.pred<-predict(CARTmodel, newdata = dataTest, type = "class")
submission<-data.frame(dataTest$PassengerId,as.numeric(CART.pred)-1)
names(submission)<-c("PassengerId","Survived")
write.table(submission,"./submissions/cart3_impute.csv",sep=",",row.names=FALSE)
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin
table(dataTrain$Cabin)
ddataTrain$Cabin[1]
dataTrain$Cabin[1]
dataTrain$Cabin<-as.character(dataTrain$Cabin)
table(dataTrain$Cabin)
str(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
str(dataTrain$Cabin)
table(dataTrain$Cabin)
dataTrain$Cabin<-as.factor(dataTrain$Cabin)
table(dataTrain$Cabin)
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
dataTest$Cabin<-as.factor(dataTest$Cabin)
library(rpart)
library(rpart)
library(rpart.plot)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age) # Age na rows removed
fol3=formula(Survived~Pclass+Sex+Fare+Age+Parch+SibSp+Cabin) # Age na rows removed
CARTmodel <- rpart(fol3, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
dataTest$Cabin<-as.factor(dataTest$Cabin)
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.8)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
fol3=formula(Survived~Pclass+Sex+Fare+Age+Parch+SibSp+Cabin) # Age na rows removed
CARTmodel <- rpart(fol3, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age) # Age na rows removed
fol3=formula(Survived~Pclass+Sex+Fare+Age+Parch+SibSp+Cabin) # Age na rows removed
CARTmodel <- rpart(fol2, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
fol3=formula(Survived~Pclass+Sex+Fare+Age+Cabin) # Age na rows removed
CARTmodel <- rpart(fol3, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
library(randomForest)
library(caret)
library(rpart)
library(tree)
library(randomForest)
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
fol2<-formula(Survived~Pclass+Sex+Fare+Age)
fol3<-formula(Survived~Pclass+Sex+Fare+Age+Cabin)
forestmodel<-randomForest(fol3, data=train)
rf.probs = predict(forestmodel, newdata = test)
sum(rf.probs==test$Survived)/nrow(test)
importance(forestmodel)
forestmodel<-randomForest(fol2, data=train)
rf.probs = predict(forestmodel, newdata = test)
sum(rf.probs==test$Survived)/nrow(test)
importance(forestmodel)
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
dataTest$Cabin<-as.factor(dataTest$Cabin)
str(dataTrain)
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
library(rpart)
library(rpart)
library(rpart.plot)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age) # Age na rows removed
fol3=formula(Survived~Pclass+Sex+Fare+Age+Cabin) # Age na rows removed
CARTmodel <- rpart(fol3, method="class", data=train)
print(CARTmodel)
prp(CARTmodel)
#accuracy of CART model on test set
PredictCARTmodel = predict(CARTmodel, newdata = test, type = "class")
sum(PredictCARTmodel==test$Survived)/nrow(test)
library(randomForest)
library(caret)
library(rpart)
library(tree)
library(randomForest)
train$Survived<-as.factor(train$Survived)
test$Survived<-as.factor(test$Survived)
fol2<-formula(Survived~Pclass+Sex+Fare+Age)
fol3<-formula(Survived~Pclass+Sex+Fare+Age+Cabin)
forestmodel<-randomForest(fol3, data=train)
rf.probs = predict(forestmodel, newdata = test)
sum(rf.probs==test$Survived)/nrow(test)
importance(forestmodel)
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
# set.seed(1000)
# train_index=sample(seq(nrow(dataTrain)),418,replace=FALSE)
# train=dataTrain[train_index,]
# test=dataTrain[-train_index,]
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.8)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
# SVM Model
library(e1071)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age)
fol3<-formula(Survived~Pclass+Sex+Fare+Age+Cabin)
SVMmodel <- svm(fol3, data=train)
svm.probs = predict(SVMmodel, newdata = test)
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>0.5]=1
sum(svm.pred==test$Survived)/nrow(test)
maxThreshold<-0
svm.accMax<-0
thresholds<-seq(0, 1, length.out=100 )
svm.acc=rep(0,length(thresholds))
for (i in 1:length(thresholds)){
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>thresholds[i]]=1
svm.acc[i]<-sum(svm.pred==test$Survived)/nrow(test)
if (svm.acc[i] > svm.accMax) {
svm.accMax = svm.acc[i]
maxThreshold=thresholds[i]
}
}
plot(thresholds,svm.acc)
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>maxThreshold]=1
sum(svm.pred==test$Survived)/nrow(test)
# SVM Model
library(e1071)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age)
fol3<-formula(Survived~Pclass+Sex+Fare+Age+Cabin)
SVMmodel <- svm(fol1, data=train)
svm.probs = predict(SVMmodel, newdata = test)
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>0.5]=1
sum(svm.pred==test$Survived)/nrow(test)
maxThreshold<-0
svm.accMax<-0
thresholds<-seq(0, 1, length.out=100 )
svm.acc=rep(0,length(thresholds))
for (i in 1:length(thresholds)){
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>thresholds[i]]=1
svm.acc[i]<-sum(svm.pred==test$Survived)/nrow(test)
if (svm.acc[i] > svm.accMax) {
svm.accMax = svm.acc[i]
maxThreshold=thresholds[i]
}
}
plot(thresholds,svm.acc)
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>maxThreshold]=1
sum(svm.pred==test$Survived)/nrow(test)
# SVM Model
library(e1071)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age)
fol3<-formula(Survived~Pclass+Sex+Fare+Age+Cabin)
SVMmodel <- svm(fol3, data=train)
svm.probs = predict(SVMmodel, newdata = test)
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
# set.seed(1000)
# train_index=sample(seq(nrow(dataTrain)),418,replace=FALSE)
# train=dataTrain[train_index,]
# test=dataTrain[-train_index,]
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.8)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
# SVM Model
library(e1071)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age)
fol3<-formula(Survived~Pclass+Sex+Fare+Age+Cabin)
SVMmodel <- svm(fol3, data=train)
svm.probs = predict(SVMmodel, newdata = test)
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>0.5]=1
sum(svm.pred==test$Survived)/nrow(test)
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
# set.seed(1000)
# train_index=sample(seq(nrow(dataTrain)),418,replace=FALSE)
# train=dataTrain[train_index,]
# test=dataTrain[-train_index,]
library(caTools)
set.seed(1000)
spl = sample.split(dataTrain$Survived, SplitRatio = 0.8)
train = subset(dataTrain, spl==TRUE)
test = subset(dataTrain, spl==FALSE)
table(dataTest$Cabin)
?grep
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
# set.seed(1000)
# train_index=sample(seq(nrow(dataTrain)),418,replace=FALSE)
# train=dataTrain[train_index,]
# test=dataTrain[-train_index,]
gsub("","H",dataTrain$Cabin)
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
dataTrain$Cabin
gsub("","H",dataTrain$Cabin)
for (i in length(dataTrain$Cabin)){}
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
for (i in length(dataTrain$Cabin)){
if (dataTrain$Cabin[i]=="") dataTrain$Cabin[i]="H"
}
dataTrain$Cabin
dataTrain$Cabin[477]
dataTrain<-read.csv("./data/train.csv")
dataTest<-read.csv("./data/test.csv")
str(dataTrain)
summary(dataTrain)
#dataTrain<-dataTrain[complete.cases(dataTrain),]
# impute na to median
dataTrain$Age[is.na(dataTrain$Age)] =median(dataTrain$Age, na.rm=TRUE)
dataTest$Age[is.na(dataTest$Age)] =median(dataTest$Age, na.rm=TRUE)
dataTest$Fare[is.na(dataTest$Fare)] =median(dataTest$Fare, na.rm=TRUE)
dataTrain$Cabin<-as.character(dataTrain$Cabin)
dataTrain$Cabin<-substr(dataTrain$Cabin, 1, 1)
#dataTrain$Cabin<-as.factor(dataTrain$Cabin)
for (i in length(dataTrain$Cabin)){
if (dataTrain$Cabin[i]=="") dataTrain$Cabin[i]="H"
}
for (i in 1:length(dataTrain$Cabin)){
if (dataTrain$Cabin[i]=="") dataTrain$Cabin[i]="H"
}
dataTrain$Cabin
dataTest$Cabin<-as.character(dataTest$Cabin)
dataTest$Cabin<-substr(dataTest$Cabin, 1, 1)
#dataTest$Cabin<-as.factor(dataTest$Cabin)
for (i in 1:length(dataTest$Cabin)){
if (dataTest$Cabin[i]=="") dataTest$Cabin[i]="H"
}
dataTest$Cabin
# SVM Model
library(e1071)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age)
fol3<-formula(Survived~Pclass+Sex+Fare+Age+Cabin)
SVMmodel <- svm(fol3, data=train)
svm.probs = predict(SVMmodel, newdata = test)
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>0.5]=1
sum(svm.pred==test$Survived)/nrow(test)
fol1=formula(Survived~Pclass+Sex+Fare)
fol2=formula(Survived~Pclass+Sex+Fare+Age)
fol3<-formula(Survived~Pclass+Sex+Fare+Age+Cabin)
SVMmodel <- svm(fol3, data=train)
svm.probs = predict(SVMmodel, newdata = test)
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>0.5]=1
sum(svm.pred==test$Survived)/nrow(test)
maxThreshold<-0
svm.accMax<-0
thresholds<-seq(0, 1, length.out=100 )
svm.acc=rep(0,length(thresholds))
for (i in 1:length(thresholds)){
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>thresholds[i]]=1
svm.acc[i]<-sum(svm.pred==test$Survived)/nrow(test)
if (svm.acc[i] > svm.accMax) {
svm.accMax = svm.acc[i]
maxThreshold=thresholds[i]
}
}
plot(thresholds,svm.acc)
svm.pred=rep(0,length(test$Survived))
svm.pred[svm.probs>maxThreshold]=1
sum(svm.pred==test$Survived)/nrow(test)
